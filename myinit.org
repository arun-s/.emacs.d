* Headline
 -------------------------------------------------------------------------
 init.el -- my personnal Emacs Init File
           see http://github.com/arun-s/emacs-config

 Copyright (c) 2003-2017 Arun Sivakumaran <aruns@outlook.com>

 Author       : Arun Sivakumaran
 Email        : aruns@outlook.com
 Date Started : 11/13/2004
 Last Updated : 03/09/2017
 -------------------------------------------------------------------------

    ___ _ __ ___   __ _  ___ ___
   / _ \ '_ ` _ \ / _` |/ __/ __|
  |  __/ | | | | | (_| | (__\__ \
 (_)___|_| |_| |_|\__,_|\___|___/


 -------------------------------------------------------------------------
 This file is NOT part of GNU Emacs.

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -------------------------------------------------------------------------

 Resources:
  Gurmeet Singh Manku @ http://www-db.stanford.edu/~manku/dotemacs.html
  Sebastien Varrette @ http://github.com/Falkor/emacs-config
  http://www.jurta.org/emacs/dotemacs.en.html

 -------------------------------------------------------------------------
* Initial Setup
** Load Paths
#+BEGIN_SRC emacs-lisp
(setq load-path (cons "~/.emacs.d/site-lisp/" load-path))
(setq load-path (cons "~/.emacs.d/elisp/" load-path))
(setq load-path (cons "~/.emacs.d/config/" load-path))
(setq exec-path (cons "/usr/local/bin/" exec-path))

(require 'defun)

(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/"))
#+END_SRC

** Setup Use Package
#+BEGIN_SRC emacs-lisp :tangle yes
;(add-to-list 'load-path "~/elisp")
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
;(use-package auto-compile
;  :config (auto-compile-on-load-mode))
;(setq load-prefer-newer t)
#+END_SRC

** Tweaks
#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode -1)
(setq tab-width 2)
(setq-default tab-width 2)
(setq tab-stop-list (number-sequence 2 200 2))

(setq blink-cursor-mode -1)
(setq column-number-mode t)
(setq major-mode (quote c-mode))
(setq global-font-lock-mode t)
(setq kill-whole-line t)
(setq next-line-add-newlines -1)
(setq nxml-child-indent 2)
(setq query-replace-highlight t)
(setq scroll-conservatively 5)
(setq scroll-step 1)
(setq search-highlight t)
(setq transient-mark-mode t)

;; Turn off mouse interface early in startup
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; No splash screen
(setq inhibit-splash-screen t)

;; Use "y or n" answers instead of full words "yes or no"
(defalias 'yes-or-no-p 'y-or-n-p)

;; colomn limit to be 80
(setq-default fill-column 80)

;;prevent emacs from splitting windows
(setq split-height-threshold 2000)
(setq split-width-threshold 1200)

;; Stop Emacs from splitting "frames", encourage it to pop up new
; frames for new content.
; see: http://www.gnu.org/software/emacs/elisp/html_node/Choosing-Window.html
(setq pop-up-frames nil)
(setq special-display-popup-frame nil)
;(setq split-window-preferred-function nil) ;discourage horizontal splits
(setq pop-up-windows nil)

	(defun display-special-buffer (buf alist)
  "put the special buffers in the right spot (bottom rigt)"
    (let ((target-window (window-at (- (frame-width) 4) (- (frame-height) 4)))
          (pop-up-windows t))
      (set-window-buffer target-window buf)
      target-window))


;; TODO: fix this
(add-to-list 'display-buffer-alist '("[ ]?[*][^*]+[*]". ((display-special-buffer))))
(add-to-list 'display-buffer-alist '("COMMIT_EDITMSG". ((display-special-buffer))))

#+END_SRC

** General Keybindings
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key "\C-j" 'newline-and-indent)
(global-set-key "\C-xg" 'goto-line)


#+END_SRC
* Core Packages
** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
 :ensure t
 :bind (("C-c ." . mc/mark-next-like-this)
        ("C->" . mc/mark-next-like-this)
        ("C-c ," . mc/mark-previous-like-this)
        ("C-<" . mc/mark-previous-like-this)
        ("C-c C-l" . mc/mark-all-like-this))
 :init
 :config
 )
#+END_SRC
** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
 :ensure t
 :bind (([remap other-window] . ace-window))
 :init
 :config
  )
#+END_SRC
** AutoComplete
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config (add-hook 'prog-mode-hook 'company-mode))
#+END_SRC

** Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config (powerline-default-theme))


#+END_SRC

** Rainbow Delimiters
	 #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :commands rainbow-delimiters-mode
  :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)

	 #+END_SRC
** Highlight Symbol
#+BEGIN_SRC emacs-lisp
( use-package highlight-symbol
   :ensure t
   :bind (("C-<f3>" . highlight-symbol)
          ("<f3>"   . highlight-symbol-next)
          ("S-<f3>" . highlight-symbol-prev)
          ("M-<f3>" . highlight-symbol-remove-all))
   :config
)
#+END_SRC

** Expand Region
#+BEGIN_SRC  emacs-lisp
(use-package expand-region
	 :ensure t
   :bind (("C-=" . er/expand-region)
          ("C-S-=" . er/contract-region))
)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
( use-package magit
  :ensure t
  :bind (("C-c m" . magit-status))
)
#+END_SRC

** Exec Path
	 #+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize)
)

	 #+END_SRC

* C-Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          '(lambda ()
;             (c-set-offset 'substatement-open 0)
	     (setq fill-column 80)
	     (setq comment-column 50)
       (setq c-basic-offset 4)
	     (setq tab-width 4)
	     (setq indent-tabs-mode nil)
	     (setq tab-stop-list (number-sequence 4 200 4))))

(add-hook 'before-save-hook
           #'my-cc-mode-before_save-hook)
#+END_SRC

* Org Mode
** Settings
#+BEGIN_SRC  emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

(setq org-agenda-files (quote ("~/orgfiles")))

(setq org-blank-before-new-entry (quote ((heading . always) (plain-list-item . always))))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

(setq org-use-fast-todo-selection t)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
** Capture Templates
#+BEGIN_SRC emacs-lisp


(setq org-directory "~/git/org")
(setq org-default-notes-file "~/git/org/refile.org")

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

(defvar my/org-basic-task-template "* TODO %^{Task}
Captured %<%Y-%m-%d %H:%M>
%?

%i
" "Basic task data")

(defvar my/org-meeting-template
 "* %^{Topic}\n** Attendees : %^{Attendees}\n** Date : %^T
  %?
" "Basic Meeting Info")

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      `(("t" "Tasks" entry
         (file+headline "~/orgfiles/refile.org" "Tasks")
         ,my/org-basic-task-template)

	("T" "Quick Task" entry
         (file+headline "~/orgfiles/refile.org" "Tasks")
         "* TODO %^{Task}"
nn         :immediate-finish t)

	("j" "Journal entry with date" plain
         (file+datetree+prompt "~/orgfiles/journal.org")
         "%K - %a\n%i\n%?\n"
         :unnarrowed t)

  ("m" "Meetings" entry
        (file+headline "~/orgfiles/refile.org" "Meetings")
         ,my/org-meeting-template)

	("q" "Quick Note" item
         (file+headline "~/orgfiles/refile.org" "Quick notes"))))

#+END_SRC
** Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
)
#+END_SRC

** Telephone Line
	 #+BEGIN_SRC emacs-lisp
;(use-package telephone-line
;  :ensure t
;  :config (telephone-line-mode t)
;)


	 #+END_SRC
* Display

** Themes
#+BEGIN_SRC emacs-lisp

(use-package color-theme)
;(use-package monokai-theme
; :init (progn (load-theme 'monokai t t)
;              (enable-theme 'monokai))
; :defer t
; :ensure t)

;(use-package ample-theme
;  :init (progn (load-theme 'ample t t)
;               (load-theme 'ample-flat t t)
;               (load-theme 'ample-light t t)
;               (enable-theme 'ample))
;  :defer t
;  :ensure t)
;
(use-package ample-zen-theme
  :init (progn (load-theme 'ample-zen t t)
                (enable-theme 'ample-zen))
  :defer t
  :ensure t)
#+END_SRC

* WhichKey
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
    (which-key-mode)
)
#+END_SRC

* Swiper
	#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  )
)

	#+END_SRC

* Tagging
#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure t
  :defer t
  :init
    (add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
              (ggtags-mode 1))))
)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp

(use-package projectile
  :ensure t
  :config
    (progn
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (setq projectile-completion-system 'ivy)
      (setq projectile-indexing-method 'alien)
      (setq projectile-enable-caching t)
      (projectile-global-mode)
    )
)

(use-package counsel-projectile
  :ensure t
  :config
    (counsel-projectile-mode)
)
#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
    (global-flycheck-mode t)
)
	
#+END_SRC
